require "json"
require "uri"

{{#operations}}
module Attune
  module Api
    class {{classname}}
      basePath = "{{basePath}}"

      def initialize(client)
        @client = client
      end

      {{#operation}}
      {{#notes}}
      # {{notes}}
      #
      {{/notes}}
      {{#allParams}}
      # @param [{{dataType}}] {{paramName}}{{newline}}
      {{/allParams}}
      {{#returnType}}
      # @return [Attune::Model::{{returnBaseType}}]{{newline}}
      {{/returnType}}
      # @raise [ArgumentError] if user_agent is not provided
      # @raise [Faraday::Error::ClientError] if the request fails or exceeds the timeout
      # @raise [AuthenticationException] if authorization header not accepted
      def {{nickname}} ({{#allParams}}{{paramName}}{{#defaultValue}} = {{{defaultValue}}}{{/defaultValue}}{{#hasMore}},{{/hasMore}}{{/allParams}})
        query_param_keys = [{{#queryParams}}:{{paramName}}{{#hasMore}},{{/hasMore}}{{/queryParams}}]

        {{#requiredParamCount}}

        # verify existence of params
        {{#requiredParams}}
        raise "{{{paramName}}} is required" if {{{paramName}}}.nil?
        {{/requiredParams}}
        {{/requiredParamCount}}

        # set default values and merge with input
        options = {
        {{#allParams}}
          :{{paramName}} => {{paramName}}{{#hasMore}},
          {{/hasMore}}
        {{/allParams}}
        }

        #resource path
        path = "{{path}}".sub('{format}','json'){{#pathParams}}.sub('{' + '{{baseName}}' + '}', escapeString({{paramName}}))
        {{/pathParams}}{{newline}}

        # pull querystring keys from options
        queryopts = options.select do |key,value|
          query_param_keys.include? key
        end

        {{#headerParams}}headers = {
          {{{paramName}}}: {{{paramName}}},
        }
        {{/headerParams}}
        {{^headerParams}}headers = nil
        {{/headerParams}}

        post_body = nil
        {{#bodyParam}}
        if body != nil
          if body.is_a?(Array)
            array = Array.new
            body.each do |item|
              if item.respond_to?("to_body".to_sym)
                array.push item.to_body
              else
                array.push item
              end
            end
            post_body = array

          else
            if body.respond_to?("to_body".to_sym)
    	        post_body = body.to_body
    	      else
    	        post_body = body
    	      end
          end
        end
        {{/bodyParam}}

        {{#returnType}}
        response = @client.request(:{{httpMethod}}, path, {:params=>queryopts,:headers=>headers, :body=>post_body })
        if response
          {{#returnContainer}}response.body.map {|response|{{/returnContainer}} Attune::Model::{{returnBaseType}}.new(JSON.parse(response.body)){{#returnContainer}} }{{/returnContainer}}
        else
          mockProc = MOCKS['{{classname}}.{{nickname}}']
          if mockProc
            mockResponse = mockProc.call({{#allParams}}{{paramName}}{{#hasMore}},{{/hasMore}}{{/allParams}})
            Attune::Model::{{returnBaseType}}.new(mockResponse)
          else
            nil
          end
        end
        {{/returnType}}
        {{^returnType}}
        @client.request(:{{httpMethod}}, path, {:params=>queryopts,:headers=>headers, :body=>post_body})
        {{/returnType}}
      {{newline}}
      end
      {{newline}}
      {{/operation}}

      private
      def escapeString(string)
        URI.encode(string.to_s)
      end
    end
  end
end
{{/operations}}