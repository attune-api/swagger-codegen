{{#models}}

{{#model}}
module Attune
  module Model
    # {{description}}
    class {{classname}}
      {{#vars}}
      attr_accessor :{{{name}}}
      {{newline}}
      {{/vars}}

      def initialize(attributes = {})
        return if attributes.empty?
        # Morph attribute keys into undescored rubyish style
        {{#vars}}
        if self.class.attribute_map[:"{{{name}}}"]
          {{#isContainer}}
            value = attributes["{{{baseName}}}"] || attributes[:"{{{name}}}"]
            if value.is_a?(Array)
              @{{{name}}} = value{{#complexType}}.map{ |v| {{complexType}}.new(v) }{{/complexType}}
            {{newline}}
            end
          {{/isContainer}}{{^isContainer}}
            # Workaround since JSON.parse has accessors as strings rather than symbols
            @{{{name}}} = attributes["{{{baseName}}}"] || attributes[:"{{{name}}}"]
        {{/isContainer}}
        end
        {{/vars}}{{newline}}
      end

      def to_body
        body = {}
        self.class.attribute_map.each_pair do |key, value|
          body[value] = self.send(key) unless self.send(key).nil?
        end
        body
      end

      def to_json(options = {})
        to_body.to_json
      end

      private
      # :internal => :external
      def self.attribute_map
        {
          {{#vars}}
          :{{{name}}} => :{{{baseName}}}{{#hasMore}},
          {{/hasMore}}
        {{/vars}}{{newline}}
        }
      end
    end
  end
end
{{/model}}
{{/models}}