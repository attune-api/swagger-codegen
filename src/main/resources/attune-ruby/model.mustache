{{#models}}

{{#model}}
module Attune
  module Model
    {{#description}}
    # {{description}}
    #
    {{/description}}
    {{#vars}}
    # @attr [{{{datatype}}}] {{name}} {{description}}
    {{/vars}}
    class {{classname}}
      {{#vars}}
      attr_accessor :{{{name}}}
      {{newline}}
      {{/vars}}

      def initialize(attributes = {})
        return if attributes.empty?
        {{#vars}}
        {{#isContainer}}
        value = attributes["{{{baseName}}}"] || attributes[:"{{{name}}}"]
        if value.is_a?(Array)
          @{{{name}}} = value{{#complexType}}.map{ |v| {{complexType}}.new(v) }{{/complexType}}
        {{newline}}
        end
        {{/isContainer}}
        {{^isContainer}}
        # Workaround since JSON.parse has accessors as strings rather than symbols
        @{{{name}}} = attributes["{{{baseName}}}"] || attributes[:"{{{name}}}"]
        {{/isContainer}}
        {{/vars}}{{newline}}
      end

      def to_body
        Hash[ATTRIBUTE_MAP.map do |internal, external|
          next unless value = send(internal)
          [external, value]
        end.compact]
      end

      def to_json(options = {})
        to_body.to_json
      end

      private
      # :internal => :external
      ATTRIBUTE_MAP = {
          {{#vars}}
          :{{{name}}} => :{{{baseName}}}{{#hasMore}},
          {{/hasMore}}
        {{/vars}}{{newline}}
        }
    end
  end
end
{{/model}}
{{/models}}